
#importing my data
my_data <-read.csv("turkey-inflation-rate-cpi.csv")
my_data

##############################################################################

#viewing the data
View(my_data)

##############################################################################

#summary of the data

summary(my_data)

##############################################################################

# Calculate sample statistics for inflation rate that are not in the function summary

mean_value_inflation <- mean(my_data$Inflation.Rate)
sd_value_inflation <- sd(my_data$Inflation.Rate)
var_value_inflation <- var(my_data$Inflation.Rate)


# Print sample statistics for inflation rate 
print(paste("mean:", mean_value_inflation))
print(paste("Standard Deviation:", sd_value_inflation))
print(paste("Variance:", var_value_inflation))

##############################################################################

# Calculate sample statistics for annual change that are not in the function summary
mean_value_Annual <- mean(my_data$Annual.Change)
sd_value_Annual <- sd(my_data$Annual.Change)
var_value_Annual <- var(my_data$Annual.Change)

# Print sample statistics
print(paste("mean:", mean_value_Annual))
print(paste("Standard Deviation:", sd_value_Annual))
print(paste("Variance:", var_value_Annual))

##############################################################################


# visualizing the data

hist(my_data$Inflation.Rate,main= "Inflation rate")
hist(my_data$Annual.Change,main= "Annual Change")

boxplot(my_data$Inflation.Rate, main="Inflation rate", col="pink")
boxplot(my_data$Annual.Change, main="Annual change", col="pink")


##############################################################################

#Normality tests 


#gglot which is a visual representation of whether the data is normaly distributed or not 

#if the shape is diagonal it means te distribution is normal

qqnorm(my_data$Inflation.Rate)
qqline(my_data$Inflation.Rate)

qqnorm(my_data$Annual.Change)
qqline(my_data$Annual.Change)


ggdensity(my_data$Inflation.Rate,main='inflation rate')
ggdensity(my_data$Annual.Change,main='annual change')

ggqqplot(my_data$Inflation.Rate)
ggqqplot(my_data$Annual.Change)


               #now to test statistically not visually
"
H0= data is normal
H1= data is not normal 

we reject if  p <= 0.05  --> we reject the null hypothesis 
              p >  0.005 --> we fail to reject the null hypothesis
"

shapiro.test(my_data$Inflation.Rate)
shapiro.test(my_data$Annual.Change)

#########################################################################

           # Point estimations and confidence intervals.

#the mean
mean(my_data$Inflation.Rate)
mean(my_data$Annual.Change)

#the standard deviation 
sd(my_data$Inflation.Rate)
sd(my_data$Annual.Change)

"
what we need to calculate the confidence intervel for the 

upper bound = point estimate + margin of error 
lower bound = point estimate - margin of error 

mean: (uknown sd)
1- sample mean (sample_mean)
2- sample standard deviation (s)
3- sample size (n)
4- alpha (alpha)
5- error (e)
6- upperbound (lower_bound)
7- lowerbound (upper_bound)

variance and standard deviation:
1-  sample standard deviation (s)
2- upperbound (lower_bound)
3- lowerbound (upper_bound)
4- sample size (n)

qt --> a function that calculates the t distribution 
nrow --> number of rows 

we have common --> 90% , 95%, 99% confidence of interval 
"
##########################################################################################
                    # confidence of interval for the mean of inflation rate 


n=NROW(my_data$Inflation.Rate)
sample_mean= mean(my_data$Inflation.Rate)
sample_sd = sd(my_data$Inflation.Rate)

                             ########################

# 90 % confidence of interval for mean
alpha= 0.1
error=qt(1-alpha/2,n-1)*sample_sd/sqrt(n)
upper_bound= sample_mean+error
lower_bound = sample_mean-error

con_interval= cat("con_interval = ",lower_bound ,"<  Mu  <",upper_bound)

                            ########################

# 95 % confidence of interval for mean 
alpha= 0.05
error=qt(1-alpha/2,n-1)*sample_sd/sqrt(n)
upper_bound= sample_mean+error
lower_bound = sample_mean-error

con_interval= cat("con_interval = ",lower_bound ,"<  Mu  <",upper_bound)

                            ########################
# 99 % confidence of interval for mean 
alpha= 0.01
error=qt(1-alpha/2,n-1)*sample_sd/sqrt(n)
upper_bound= sample_mean+error
lower_bound = sample_mean-error

con_interval= cat("con_interval = ",lower_bound ,"<  Mu  <",upper_bound)

##########################################################################################

                     # confidence of interval for the mean of Annual change  


n=NROW(my_data$Annual.Change)
sample_mean= mean(my_data$Annual.Change)
sample_sd = sd(my_data$Annual.Change)


                            ########################
# 90 % confidence of interval for mean
alpha= 0.1
error=qt(1-alpha/2,n-1)*sample_sd/sqrt(n)
upper_bound= sample_mean+error
lower_bound = sample_mean-error


con_interval= cat("con_interval = ",lower_bound ,"<  Mu  <",upper_bound)


                            ########################

# 95 % confidence of interval for mean 
alpha= 0.05
error=qt(1-alpha/2,n-1)*sample_sd/sqrt(n)
upper_bound= sample_mean+error
lower_bound = sample_mean-error


con_interval= cat("con_interval = ",lower_bound ,"<  Mu  <",upper_bound)

                            ########################  

# 99 % confidence of interval for mean 
alpha= 0.01
error=qt(1-alpha/2,n-1)*sample_sd/sqrt(n)
upper_bound= sample_mean+error
lower_bound = sample_mean-error


con_interval= cat("con_interval = ",lower_bound ,"<  Mu  <",upper_bound)

##########################################################################################

              # confidence of interval for standard deviation and variance of inflation rate 

n=NROW(my_data$Inflation.Rate)
sample_sd = sd(my_data$Inflation.Rate)

                            ########################

# 90 % confidence of interval for standard deviation and variance
alpha= 0.1
upper_bound = (n-1) *((sample_sd)^2)/qchisq(alpha/2, n-1)
lower_bound=  (n-1) *((sample_sd)^2)/qchisq(1-alpha/2, n-1)

con_interval_variance= cat("con_interval = ",lower_bound ,"<  σ^2  <",upper_bound)
con_interval_sd= cat("con_interval = ",sqrt(lower_bound),"<  σ  <",sqrt(upper_bound))

                            ########################  

# 95 % confidence of interval for standard deviation and variance
alpha= 0.05
upper_bound = (n-1) *((sample_sd)^2)/qchisq(alpha/2, n-1)
lower_bound=  (n-1) *((sample_sd)^2)/qchisq(1-alpha/2, n-1)

con_interval_variance= cat("con_interval = ",lower_bound ,"<  σ^2  <",upper_bound)
con_interval_sd= cat("con_interval = ",sqrt(lower_bound),"<  σ  <",sqrt(upper_bound))

                            ########################  

# 99 % confidence of interval for standard deviation and variance
alpha= 0.01
upper_bound = (n-1) *((sample_sd)^2)/qchisq(alpha/2, n-1)
lower_bound=  (n-1) *((sample_sd)^2)/qchisq(1-alpha/2, n-1)

con_interval_variance= cat("con_interval = ",lower_bound ,"<  σ^2  <",upper_bound)
con_interval_sd= cat("con_interval = ",sqrt(lower_bound),"<  σ  <",sqrt(upper_bound))

##########################################################################################

            # confidence of interval for standard deviation and variance of annual change 

n=NROW(my_data$Annual.Change)
sample_sd = sd(my_data$Annual.Change)

                            ########################  

# 90 % confidence of interval for standard deviation and variance
alpha= 0.1
upper_bound = (n-1) *((sample_sd)^2)/qchisq(alpha/2, n-1)
lower_bound=  (n-1) *((sample_sd)^2)/qchisq(1-alpha/2, n-1)

con_interval_variance= cat("con_interval = ",lower_bound ,"<  σ^2  <",upper_bound)
con_interval_sd= cat("con_interval = ",sqrt(lower_bound),"<  σ  <",sqrt(upper_bound))

                            ########################  
# 95 % confidence of interval for standard deviation and variance
alpha= 0.05
upper_bound = (n-1) *((sample_sd)^2)/qchisq(alpha/2, n-1)
lower_bound=  (n-1) *((sample_sd)^2)/qchisq(1-alpha/2, n-1)

con_interval_variance= cat("con_interval = ",lower_bound ,"<  σ^2  <",upper_bound)
con_interval_sd= cat("con_interval = ",sqrt(lower_bound),"<  σ  <",sqrt(upper_bound))

                            ########################  
# 99 % confidence of interval for standard deviation and variance
alpha= 0.01
upper_bound = (n-1) *((sample_sd)^2)/qchisq(alpha/2, n-1)
lower_bound=  (n-1) *((sample_sd)^2)/qchisq(1-alpha/2, n-1)

con_interval_variance= cat("con_interval = ",lower_bound ,"<  σ^2  <",upper_bound)
con_interval_sd= cat("con_interval = ",sqrt(lower_bound),"<  σ  <",sqrt(upper_bound))

##########################################################################################

          #Define 2-3 hypotheses and test for them

# 1- Is the average inflation rate of inflation in turkey according to the last few years > than 30?
#test it for 90% confidence interval


t.test(my_data$Inflation.Rate , alternative= "greater", mu= 30 ,conf.level=0.90)

#the p value is p-value = 0.2334 which is less than 0.05 so we reject the null hypothesis


# 2- Is the average Annual change of inflation in turkey according to the last few years < than 0.2?
#test it for 95% confidence interval

t.test(my_data$Annual.Change , alternative= "less", mu= 0.2 ,conf.level=0.95)

#the p value is  p-value = 0.5176 which is greater than 0.05 so we fail to reject the null hypothesis



##########################################################################################

          #Goodness of fit tests and other checks for detecting the distribution
#(complete)

##########################################################################################

      # Design a linear regression model for your problem. Input, output analysis. Remember
      #some data could be linear when transformed such as after taking the logarithm.
"
a regression model that uses a straight line to describe the relationship between variables.
It finds the line of best fit through your data by searching for the value of the regression
coefficient(s) that minimizes the total error of the model.

"


#linear regression model for the relationship between "inflation rate" and "annual change"


lm(formula= my_data$Inflation.Rate ~ my_data$Annual.Change)
 #the equation is according to the output to the linear regression model--> y'= 32.5739+0.4883x




# plot to understand


# Scatter plot
plot(my_data$Annual.Change, my_data$Inflation.Rate, pch = 8,
     main = "Linear Regression", xlab = "annual change", ylab = "inflation rate")

# Linear regression line
fit <- lm(my_data$Inflation.Rate ~my_data$Annual.Change, data = my_data)
abline(fit, col = "yellow")


##########################################################################################

                                      #ANOVA

"
we have two types of anove:


-one way anova. --> purpose is To investigate whether mean of an independent variable is different in different
conditions.
     
     null hypothesis :the data is normaly distributed 

-two way anova --> 

        null hypotesis. :   1- the means of observations grouped by one factor are the same; 
                            2- the means of observations grouped by the other factor are the same;
                            3- there is no interaction between the two factors.
"


#one way 

one_way = aov(my_data$Inflation.Rate ~ my_data$Annual.Change)
summary(one_way)
#our p in less than 0.05 so the null hypothesis is so we reject the null hypothesis 

plot(my_data$Inflation.Rate ~ my_data$Annual.Change)


##########################################################################################

                        #Application of nonparametric tests

wilcox.test(my_data$Inflation.Rate, my_data$Annual.Change , alt="greater")

kruskal.test(my_data$Inflation.Rate ~ factor(my_data$date))

#sign test
binom.test(sum(my_data$Annual.Change > 0), n = length(my_data$Annual.Change))
binom.test(sum(my_data$Inflation.Rate > 0), n = length(my_data$Inflation.Rate))

#Spearman rank correlation coefficient
'
Please note that the Spearman rank correlation coefficient measures the strength and direction of the monotonic relationship between two variables.
'
cor(my_data$Inflation.Rate, my_data$Annual.Change, method = "spearman")
cor.test(my_data$Inflation.Rate, my_data$Annual.Change, method = "spearman")

#the runs test (not working)
runs.test(my_data$Annual.Change)
